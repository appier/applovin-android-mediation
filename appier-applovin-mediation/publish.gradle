apply plugin: 'maven-publish'

ext {
    groupId = 'com.appier'
    artifactId = 'applovin-mediation'
    url = 'https://www.appier.com/'
    scmUrl = 'https://github.com/appier/appier-applovin-android-mediation'
    licenseName = 'Proprietary License'
    licenseUrl = 'https://www.appier.com'
    developerEmail = 'mobile@appier.com'
    debugSuffix = '-debug'
}

description = 'Appier Applovin Mediation SDK'

task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    // It's also a good practice for a closed-source SDK to expose some API interfaces
    // with source code, here we assume these has suffix of '.api' in there package name.
    include("**/api/*.java")
    include("**/api/*.kt")
}

task javadoc(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    include("**/api/*.java")
    include("**/api/*.kt")
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    failOnError false
}

task javadocJar(type: Jar) {
    from javadoc
}

afterEvaluate {
    // NOTE:
    // This is a workaround for the known limitation by the Maven Publish plugin
    // that appier module cannot determine which publication of the module
    // to depend on either debug or release.
    //
    // See https://stackoverflow.com/questions/51247830/publishing-is-not-able-to-resolve-a-dependency-on-a-project-with-multiple-public.
    //
    // In order to publish releases, you must invoke publish with -Dpublication option
    //
    // Examples:
    // - ./gradlew appier-applovin-mediation:publish -Dpublication=debug
    // - ./gradlew appier-applovin-mediation:publish -Dpublication=release
    String publication = getPublication()
    System.out.println("publication: ${publication}")
    publishing {
        publications {
            if (publication.toLowerCase().contains("release")) {
                release(MavenPublication) {
                    from components.findByName(publication)
                    artifact(sourcesJar) {
                        classifier = "sources" // this appends '-sources' to the filename of jar
                    }
                    artifact(javadocJar) {
                        classifier = "javadoc" // this appends '-javadoc' to the filename of jar
                    }
                    groupId = project.groupId
                    artifactId = project.artifactId
                    version = project.version
                    pom {
                        name = "${project.groupId}:${project.artifactId}"
                        description = project.description
                        url = project.url
                        scm {
                            url = project.scmUrl
                        }
                        licenses {
                            license {
                                name = project.licenseName
                                url = project.licenseUrl
                            }
                        }
                        developers {
                            developer {
                                email = project.developerEmail
                            }
                        }
                    }
                }
            } else if (publication.toLowerCase().contains("debug")) {
                debug(MavenPublication) {
                    from components.findByName(publication)
                    artifact(sourcesJar) {
                        classifier = "sources" // this appends '-sources' to the filename of jar
                    }
                    artifact(javadocJar) {
                        classifier = "javadoc" // this appends '-javadoc' to the filename of jar
                    }
                    groupId = project.groupId
                    artifactId = "${project.artifactId}${project.debugSuffix}"
                    version = project.version
                    pom {
                        name = "${project.groupId}:${project.artifactId}${project.debugSuffix}"
                        description = project.description
                        url = project.url
                        scm {
                            url = project.scmUrl
                        }
                        licenses {
                            license {
                                name = project.licenseName
                                url = project.licenseUrl
                            }
                        }
                        developers {
                            developer {
                                email = project.developerEmail
                            }
                        }
                    }
                }
            } else {
                System.out.println("Invalid publication: ${publication}")
            }
        }
    }
}

apply from: "publish-maven-central.gradle"